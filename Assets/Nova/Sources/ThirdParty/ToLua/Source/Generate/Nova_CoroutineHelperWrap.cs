//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Nova_CoroutineHelperWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Nova.CoroutineHelper), typeof(System.Object));
		L.RegFunction("AcquireGameStateLock", AcquireGameStateLock);
		L.RegFunction("ReleaseGameStateLock", ReleaseGameStateLock);
		L.RegFunction("Reset", Reset);
		L.RegFunction("Take", Take);
		L.RegFunction("New", _CreateNova_CoroutineHelper);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("fence", get_fence, set_fence);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNova_CoroutineHelper(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Nova.GameState arg0 = (Nova.GameState)ToLua.CheckObject<Nova.GameState>(L, 1);
				Nova.CoroutineHelper obj = new Nova.CoroutineHelper(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Nova.CoroutineHelper.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AcquireGameStateLock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.CoroutineHelper obj = (Nova.CoroutineHelper)ToLua.CheckObject<Nova.CoroutineHelper>(L, 1);
			obj.AcquireGameStateLock();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReleaseGameStateLock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.CoroutineHelper obj = (Nova.CoroutineHelper)ToLua.CheckObject<Nova.CoroutineHelper>(L, 1);
			obj.ReleaseGameStateLock();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.CoroutineHelper obj = (Nova.CoroutineHelper)ToLua.CheckObject<Nova.CoroutineHelper>(L, 1);
			obj.Reset();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Take(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Nova.CoroutineHelper obj = (Nova.CoroutineHelper)ToLua.CheckObject<Nova.CoroutineHelper>(L, 1);
			object o = obj.Take();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fence(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CoroutineHelper obj = (Nova.CoroutineHelper)o;
			object ret = obj.fence;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fence on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fence(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Nova.CoroutineHelper obj = (Nova.CoroutineHelper)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.fence = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fence on a nil value");
		}
	}
}

